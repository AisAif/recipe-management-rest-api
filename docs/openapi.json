{
  "openapi": "3.0.0",
  "info": {
    "title": "Recipe Management API",
    "description": "Rest API for Recipe Management",
    "version": "1.0.0",
    "contact": {
      "name": "Abdullah Isbarul Fahmi",
      "email": "iam@ais-aif.my.id",
      "url": "https://ais-aif.my.id"
    }
  },
  "servers": [
    {
      "url": "https://recipe.ais-aif.my.id"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth API"
    },
    {
      "name": "User",
      "description": "User API"
    },
    {
      "name": "Recipe",
      "description": "Recipe API"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "operationId": "register",
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterRequest"
        },
        "responses": {
          "201": {
            "description": "registered"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login a user",
        "operationId": "login",
        "requestBody": {
          "$ref": "#/components/requestBodies/LoginRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUserResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "Update current user",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "operationId": "updateCurrentUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateUserRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/recipes": {
      "post": {
        "tags": ["Recipe"],
        "summary": "Create a new recipe",
        "operationId": "createRecipe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateRecipeRequest"
        },
        "responses": {
          "201": {
            "description": "created"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "tags": ["Recipe"],
        "summary": "Get all publish recipes",
        "operationId": "getAllRecipes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/Sorting"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRecipesResponse"
          }
        }
      }
    },
    "/recipes/current": {
      "get": {
        "tags": ["Recipe"],
        "summary": "Get current user's recipes",
        "operationId": "getCurrentUserRecipes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/Sorting"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRecipesResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/recipes/{recipe_id}": {
      "get": {
        "tags": ["Recipe"],
        "summary": "Get a recipe",
        "operationId": "getRecipe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/RecipeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRecipeResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "tags": ["Recipe"],
        "summary": "Update a recipe",
        "operationId": "updateRecipe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/RecipeId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateRecipeRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["Recipe"],
        "summary": "Delete a recipe",
        "operationId": "deleteRecipe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/RecipeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/recipes/{recipe_id}/toggle-publish": {
      "patch": {
        "tags": ["Recipe"],
        "summary": "Toggle publish for recipe",
        "operationId": "togglePublishRecipe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/RecipeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "test"
          },
          "name": {
            "type": "string",
            "example": "test"
          }
        }
      },
      "Recipe": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "recipe a"
          },
          "content": {
            "type": "string",
            "example": "{markdown or html}"
          },
          "image_url": {
            "type": "string",
            "example": "https://example.com/image.png"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_public": {
            "type": "boolean"
          }
        }
      },
      "PageInfo": {
        "type": "object",
        "example": {
          "example": {
            "next": "eyJmaWVsZHMiOlt7Im5hbWUiOiJpZCIsInZhbHVlIjo4MCwiZGlyZWN0aW9uIjoiYXNjIn1dLCJsaW1pdCI6NSwiYmFja3dhcmQiOmZhbHNlfQ==",
            "prev": "eyJmaWVsZHMiOlt7Im5hbWUiOiJpZCIsInZhbHVlIjo3NiwiZGlyZWN0aW9uIjoiYXNjIn1dLCJsaW1pdCI6NSwiYmFja3dhcmQiOnRydWV9",
            "hasNext": true,
            "hasPrev": false,
            "totalRows": 8,
            "rangeTruncated": false
          }
        }
      }
    },
    "requestBodies": {
      "RegisterRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "LoginRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "UpdateUserRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreateRecipeRequest": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "content": {
                  "type": "string",
                  "description": "Recipe content in markdown or HTML format"
                },
                "image": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "required": ["title", "content", "image"]
            }
          }
        }
      },
      "UpdateRecipeRequest": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "content": {
                  "type": "string",
                  "description": "Recipe content in markdown or HTML format"
                },
                "image": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "LoginResponse": {
        "description": "login response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "{token}"
                    }
                  }
                },
                "message": {
                  "example": "Login succesfully"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      },
      "GetUserResponse": {
        "description": "get user response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "user"
                    },
                    "name": {
                      "type": "string",
                      "example": "user"
                    }
                  }
                },
                "message": {
                  "example": "Success"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      },
      "GetRecipeResponse": {
        "description": "get recipe response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Recipe"
                },
                "message": {
                  "example": "Success"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      },
      "GetRecipesResponse": {
        "description": "get all recipes response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recipe"
                  }
                },
                "message": {
                  "example": "Success"
                },
                "errors": {
                  "example": null
                },
                "page_info": {
                  "$ref": "#/components/schemas/PageInfo"
                }
              }
            }
          }
        }
      },
      "UpdateResponse": {
        "description": "update response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "example": null
                },
                "message": {
                  "example": "Updated successfully"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      },
      "DeleteResponse": {
        "description": "delete response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "example": null
                },
                "message": {
                  "example": "Deleted successfully"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "example": null
                },
                "message": {
                  "example": "No Authorization header provided"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "error validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "example": null
                },
                "message": {
                  "example": "Bad Request"
                },
                "errors": {
                  "type": "array",
                  "example": [
                    {
                      "field": "username",
                      "message": "REQUIRED"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "example": null
                },
                "message": {
                  "example": "Not found"
                },
                "errors": {
                  "example": null
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "example": "{token}"
        }
      },
      "RecipeId": {
        "name": "recipe_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "example": 1
        }
      },
      "Cursor": {
        "name": "cursor",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "{cursor}"
        }
      },
      "Sorting": {
        "name": "sorting",
        "in": "query",
        "description": "Sorting query parameters is JSON encoded string. For example, [{\"field\": \"Name\",\"direction\": \"asc\"},{\"field\":\"UpdatedAt\",\"direction\":\"desc\"}]",
        "schema": {
          "type": "string",
          "example": "asc%5B%7B%22field%22:%22id%22,%22direction%22:%22desc%22%7D%5Dz"
        }
      }
    }
  }
}
